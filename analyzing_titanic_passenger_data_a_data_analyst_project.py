# -*- coding: utf-8 -*-
"""Analyzing Titanic Passenger Data: A Data Analyst Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nPbv7tBL2IFvPLZ2ZwhrJippEz3TZJmJ

Analyzing Titanic Passenger Data: A Data Analyst Project by Wendel Burlat

The sinking of the Titanic is one of the most well-known maritime disasters in history, and the passenger data from that tragic event has provided valuable insights into survival factors. In this data analyst project, we will dive into the Titanic passenger dataset to analyze and uncover patterns, correlations, and insights that shed light on the factors that influenced passenger survival. By applying data analysis techniques, statistical methods, and visualization, we aim to provide a comprehensive understanding of the Titanic's passengers and their fates.

Data Exploration and Cleaning:

Conduct a thorough exploration of the Titanic passenger dataset.
Handle missing data, outliers, and any data inconsistencies.
"""

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files
uploades = files.upload()

titanic_df = pd.read_csv('tested.csv')

titanic_df.info()

titanic_df.describe()

titanic_df.isnull().sum()

"""Data Exploration and Cleaning:

Conduct a thorough exploration of the Titanic passenger dataset.
Handle missing data, outliers, and any data inconsistencies.
"""

median_age = titanic_df['Age'].median()
titanic_df['Age'].fillna(median_age, inplace=True)

# Detect and handle outliers (for example, using the IQR method for Fare)
Q1 = titanic_df['Fare'].quantile(0.25)
Q3 = titanic_df['Fare'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
titanic_df = titanic_df[(titanic_df['Fare'] >= lower_bound) & (titanic_df['Fare'] <= upper_bound)]

plt.figure(figsize=(8, 6))
plt.hist(titanic_df['Age'], bins=20, color='skyblue', edgecolor='black')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

print("\nMissing Data after Handling:")
print(titanic_df.isnull().sum())

overall_survival_rate = titanic_df['Survived'].mean()

print(f"Overall Survival Rate: {overall_survival_rate:.2%}")

# Survival rate by passenger class
survival_by_class = titanic_df.groupby('Pclass')['Survived'].mean()
print("\nSurvival Rate by Passenger Class:")
print(survival_by_class)

# Survival rate by gender
survival_by_gender = titanic_df.groupby('Sex')['Survived'].mean()
print("\nSurvival Rate by Gender:")
print(survival_by_gender)

# Create age groups and calculate survival rate by age group
age_bins = [0, 18, 30, 50, 100]  # Define age bins
age_labels = ['0-18', '19-30', '31-50', '51+']  # Labels for age groups
titanic_df['AgeGroup'] = pd.cut(titanic_df['Age'], bins=age_bins, labels=age_labels)
survival_by_age_group = titanic_df.groupby('AgeGroup')['Survived'].mean()
print("\nSurvival Rate by Age Group:")
print(survival_by_age_group)

# Survival rate by embarkation port
survival_by_embarkation = titanic_df.groupby('Embarked')['Survived'].mean()
print("\nSurvival Rate by Embarkation Port:")
print(survival_by_embarkation)

# Visualize survival rates by passenger class
plt.figure(figsize=(10, 5))
plt.bar(survival_by_class.index, survival_by_class.values)
plt.title('Survival Rate by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Survival Rate')
plt.xticks(survival_by_class.index, labels=['1st Class', '2nd Class', '3rd Class'])
plt.show()



"""Demographic Insights:

Analyze the demographic distribution of passengers, including age and gender.
Determine the average age of passengers and its variation across different groups.
"""

gender_distribution = titanic_df['Sex'].value_counts()

print("Gender Distribution:")
print(gender_distribution)

# Visualize the gender distribution
plt.figure(figsize=(6, 4))
plt.bar(gender_distribution.index, gender_distribution.values, color=['skyblue', 'lightcoral'])
plt.title('Gender Distribution of Passengers')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()

# Determine the average age of passengers
average_age = titanic_df['Age'].mean()
print(f"\nAverage Age of Passengers: {average_age:.2f} years")

# Calculate the average age by gender
average_age_by_gender = titanic_df.groupby('Sex')['Age'].mean()
print("\nAverage Age by Gender:")
print(average_age_by_gender)

# Visualize the average age by gender
plt.figure(figsize=(6, 4))
plt.bar(average_age_by_gender.index, average_age_by_gender.values, color=['skyblue', 'lightcoral'])
plt.title('Average Age by Gender')
plt.xlabel('Gender')
plt.ylabel('Average Age')
plt.show()

# Calculate the average age by passenger class
average_age_by_class = titanic_df.groupby('Pclass')['Age'].mean()
print("\nAverage Age by Passenger Class:")
print(average_age_by_class)

# Visualize the average age by passenger class
plt.figure(figsize=(6, 4))
plt.bar(average_age_by_class.index, average_age_by_class.values, color=['lightgreen', 'lightblue', 'lightcoral'])
plt.title('Average Age by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Average Age')
plt.xticks(average_age_by_class.index, labels=['1st Class', '2nd Class', '3rd Class'])
plt.show()

"""Family Relationships

Investigate family relationships by analyzing the number of siblings/spouses (SibSp) and parents/children (Parch) on board.
Determine if having family members on board affected survival rates.
"""

# Investigate family relationships by analyzing SibSp and Parch
# Combine SibSp and Parch to create a 'FamilySize' feature
titanic_df['FamilySize'] = titanic_df['SibSp'] + titanic_df['Parch']

# Analyze the distribution of family sizes
family_size_distribution = titanic_df['FamilySize'].value_counts()
print("Family Size Distribution:")
print(family_size_distribution)

# Calculate survival rates by family size
survival_by_family_size = titanic_df.groupby('FamilySize')['Survived'].mean()
print("\nSurvival Rate by Family Size:")
print(survival_by_family_size)

# Visualize the distribution of family sizes
plt.figure(figsize=(10, 6))
plt.bar(family_size_distribution.index, family_size_distribution.values, color='lightblue')
plt.title('Distribution of Family Sizes on Titanic')
plt.xlabel('Family Size')
plt.ylabel('Count')
plt.xticks(family_size_distribution.index)
plt.show()

"""Fare Analysis:

Examine the distribution of ticket fares.
Compare fare distributions across passenger classes.
"""

# Visualize survival rates by family size
plt.figure(figsize=(10, 6))
plt.plot(survival_by_family_size.index, survival_by_family_size.values, marker='o', linestyle='-', color='green')
plt.title('Survival Rate by Family Size')
plt.xlabel('Family Size')
plt.ylabel('Survival Rate')
plt.xticks(survival_by_family_size.index)
plt.grid(True)
plt.show()

# Examine the distribution of ticket fares
plt.figure(figsize=(8, 6))
plt.hist(titanic_df['Fare'], bins=30, color='skyblue', edgecolor='black')
plt.title('Distribution of Ticket Fares on Titanic')
plt.xlabel('Fare')
plt.ylabel('Frequency')
plt.show()

# Compare fare distributions across passenger classes
plt.figure(figsize=(10, 6))
class_labels = ['1st Class', '2nd Class', '3rd Class']
colors = ['lightgreen', 'lightblue', 'lightcoral']
for i, pclass in enumerate(class_labels):
    subset = titanic_df[titanic_df['Pclass'] == i + 1]
    plt.hist(subset['Fare'], bins=30, alpha=0.6, color=colors[i], label=pclass, edgecolor='black')

plt.title('Fare Distribution by Passenger Class')
plt.xlabel('Fare')
plt.ylabel('Frequency')
plt.legend()
plt.show()



"""Cabin Investigation:

Explore the distribution of passengers across cabins (if available).
Determine if passengers with cabin information had a different survival rate.
"""

# Count the number of passengers with known cabin information
passengers_with_cabin = titanic_df[~titanic_df['Cabin'].isnull()]
passengers_without_cabin = titanic_df[titanic_df['Cabin'].isnull()]

# Display the counts
print("Passengers with Cabin Information:", len(passengers_with_cabin))
print("Passengers without Cabin Information:", len(passengers_without_cabin))

"""Exploring the distribution of passengers across cabins and investigating whether passengers with cabin information had a different survival rate is a bit challenging because the dataset you provided appears to have limited cabin information (many missing values in the 'Cabin' column). However, you can still perform some analysis on the available data."""

# Display the counts
print("Passengers with Cabin Information:", len(passengers_with_cabin))
print("Passengers without Cabin Information:", len(passengers_without_cabin))

# Determine if passengers with cabin information had a different survival rate
survival_rate_with_cabin = passengers_with_cabin['Survived'].mean()
survival_rate_without_cabin = passengers_without_cabin['Survived'].mean()

print("\nSurvival Rate for Passengers with Cabin Information:", survival_rate_with_cabin)
print("Survival Rate for Passengers without Cabin Information:", survival_rate_without_cabin)

# Perform statistical significance test (e.g., t-test) to check if the difference is significant
from scipy import stats

# Extract survival data for passengers with and without cabin information
survived_with_cabin = passengers_with_cabin['Survived']
survived_without_cabin = passengers_without_cabin['Survived']

# Perform t-test
t_statistic, p_value = stats.ttest_ind(survived_with_cabin, survived_without_cabin, equal_var=False)

print("\nStatistical Significance Test (t-test):")
print("T-statistic:", t_statistic)
print("P-value:", p_value)

# Interpret the results
alpha = 0.05  # Significance level
if p_value < alpha:
    print("\nThe difference in survival rates is statistically significant.")
else:
    print("\nThe difference in survival rates is not statistically significant.")



"""Embarkation Port Analysis:

Analyze how embarkation ports (Cherbourg, Southampton, Queenstown) relate to passenger demographics and survival rates.
"""

# Analyze how embarkation ports relate to passenger demographics
# Count the number of passengers who embarked at each port
passengers_by_port = titanic_df['Embarked'].value_counts()
print("Passengers by Embarkation Port:")
print(passengers_by_port)

# Visualize the distribution of passengers by embarkation port
plt.figure(figsize=(8, 6))
plt.bar(passengers_by_port.index, passengers_by_port.values, color=['lightcoral', 'lightblue', 'lightgreen'])
plt.title('Passenger Distribution by Embarkation Port')
plt.xlabel('Embarkation Port')
plt.ylabel('Count')
plt.show()

# Analyze how embarkation ports relate to survival rates
survival_by_port = titanic_df.groupby('Embarked')['Survived'].mean()
print("\nSurvival Rate by Embarkation Port:")
print(survival_by_port)

# Visualize survival rates by embarkation port
plt.figure(figsize=(8, 6))
plt.bar(survival_by_port.index, survival_by_port.values, color=['lightcoral', 'lightblue', 'lightgreen'])
plt.title('Survival Rate by Embarkation Port')
plt.xlabel('Embarkation Port')
plt.ylabel('Survival Rate')
plt.show()

"""Name Analysis:

Extract titles from passenger names (e.g., Mr., Mrs., Miss) and analyze their distribution.
Investigate if passengers with specific titles had a different chance of survival.
"""

# Extract titles from passenger names and create a new 'Title' column
titanic_df['Title'] = titanic_df['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)

# Analyze the distribution of titles
title_distribution = titanic_df['Title'].value_counts()
print("Distribution of Titles:")
print(title_distribution)

# Visualize the distribution of titles
plt.figure(figsize=(10, 6))
plt.bar(title_distribution.index, title_distribution.values, color='skyblue')
plt.title('Distribution of Passenger Titles')
plt.xlabel('Title')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# Investigate if passengers with specific titles had a different chance of survival
title_survival_rate = titanic_df.groupby('Title')['Survived'].mean()
print("\nSurvival Rate by Title:")
print(title_survival_rate)

# Visualize survival rates by title
plt.figure(figsize=(10, 6))
plt.bar(title_survival_rate.index, title_survival_rate.values, color='lightgreen')
plt.title('Survival Rate by Passenger Title')
plt.xlabel('Title')
plt.ylabel('Survival Rate')
plt.xticks(rotation=45)
plt.show()

"""Correlation Analysis:

Calculate correlations between various features to identify relationships.
Explore how different factors are correlated with each other and with survival.
"""

correlation_matrix = titanic_df.corr()

# Visualize the correlation matrix using a heatmap
import seaborn as sns
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

# Visualize the correlation matrix using a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

# Calculate correlations between categorical features (e.g., Pclass, Sex, Embarked) and survival
# Convert categorical variables to numerical using one-hot encoding
titanic_df_encoded = pd.get_dummies(titanic_df, columns=['Pclass', 'Sex', 'Embarked'], drop_first=True)

# Calculate correlations
correlation_matrix_encoded = titanic_df_encoded.corr()

# Visualize the correlation matrix for encoded features using a heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix_encoded, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix (Encoded Features)')
plt.show()

# Calculate correlations between features and survival
correlations_with_survival = correlation_matrix_encoded['Survived'].sort_values(ascending=False)
print("Correlations with Survival:")
print(correlations_with_survival)



"""Machine Learning Model:
Build a predictive model to estimate passenger survival based on selected features.
Evaluate model performance using appropriate metrics.
"""

# Select features for modeling (you can choose different features based on your analysis)
selected_features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']

# Create a new DataFrame with selected features
X = titanic_df[selected_features]

# Target variable (Survived)
y = titanic_df['Survived']

# Handle missing data and categorical variables (e.g., one-hot encoding)
X['Age'].fillna(X['Age'].median(), inplace=True)
X['Fare'].fillna(X['Fare'].median(), inplace=True)
X = pd.get_dummies(X, columns=['Sex', 'Embarked'], drop_first=True)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build a logistic regression model
model = LogisticRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(class_report)

"""The results you provided indicate that your predictive machine learning model has achieved a perfect accuracy of 1.00, which means it made correct predictions for all 73 passengers in the test dataset. Let's break down the other metrics:

Confusion Matrix: The confusion matrix confirms that there are no errors in your model's predictions. It correctly identified all 50 non-survivors (0) and all 23 survivors (1). There are no false positives (predicting survival when it didn't happen) or false negatives (predicting non-survival when it did happen).

True Positives (TP): 23
True Negatives (TN): 50
False Positives (FP): 0
False Negatives (FN): 0
Classification Report: The classification report provides a more detailed breakdown of precision, recall, and F1-Score for each class (0 and 1):

Precision: Both for class 0 and class 1, precision is 1.00, which means that when your model predicts class 0 or class 1, it's always correct.

Recall (Sensitivity): For both classes, recall is 1.00, indicating that your model captures all actual instances of class 0 and class 1.

F1-Score: The F1-Score is 1.00 for both classes, reflecting a perfect balance between precision and recall.

Macro Avg: The macro average calculates the metrics for each class and then takes the average. In this case, the macro average for precision, recall, and F1-Score is also 1.00, as both classes have the same metrics.

Weighted Avg: The weighted average calculates metrics for each class and weighs them by class support. Since your dataset is perfectly balanced (50 instances of class 0 and 23 instances of class 1), the weighted average is also 1.00.

In summary, your model is performing exceptionally well on this dataset, achieving perfect accuracy and making no prediction errors. However, it's important to note that such perfect results are relatively rare in real-world datasets, and it's a good practice to scrutinize the data and the model's performance on larger and more diverse datasets to ensure its generalizability.
"""

import seaborn as sns
# Visualization 1: Age Distribution
plt.figure(figsize=(8, 6))
sns.histplot(data=titanic_df, x='Age', bins=20, color='skyblue')
plt.title('Age Distribution of Passengers')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

# Visualization 2: Survival Rate by Passenger Class
survival_by_class = titanic_df.groupby('Pclass')['Survived'].mean().reset_index()
plt.figure(figsize=(8, 6))
sns.barplot(data=survival_by_class, x='Pclass', y='Survived', palette='Set3')
plt.title('Survival Rate by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Survival Rate')
plt.show()

# Visualization 3: Gender Distribution
gender_distribution = titanic_df['Sex'].value_counts()
plt.figure(figsize=(6, 4))
plt.pie(gender_distribution, labels=gender_distribution.index, autopct='%1.1f%%', colors=['lightcoral', 'lightblue'])
plt.title('Gender Distribution of Passengers')
plt.show()

# Visualization 4: Scatter Plot of Age vs. Fare
plt.figure(figsize=(8, 6))
sns.scatterplot(data=titanic_df, x='Age', y='Fare', hue='Survived', palette='coolwarm')
plt.title('Scatter Plot of Age vs. Fare (Survival)')
plt.xlabel('Age')
plt.ylabel('Fare')
plt.legend(title='Survived', labels=['No', 'Yes'])
plt.show()

"""Feature Engineering:

Create new features that might be useful for prediction or analysis.
For example, you can create a "family size" feature by combining SibSp and Parch.
"""

# Create a new feature "FamilySize" by combining "SibSp" and "Parch"
titanic_df['FamilySize'] = titanic_df['SibSp'] + titanic_df['Parch']

# Display the updated DataFrame with the new feature
print(titanic_df[['SibSp', 'Parch', 'FamilySize']].head())